/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once
#include "KBECommon.h"
#include "KBETypes.h"
#include "MemoryStream.h"
#include "Bundle.h"
#include "DataTypes.h"
namespace KBEngine
{


class KBENGINEPLUGINS_API DATATYPE_ENTITY_FORBID_COUNTER : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ENTITY_FORBID_COUNTER& datas);
	void addToStreamEx(Bundle& stream, const ENTITY_FORBID_COUNTER& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENTITYID_LIST : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ENTITYID_LIST& datas);
	void addToStreamEx(Bundle& stream, const ENTITYID_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_BAG : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BAG_values22_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		class KBENGINEPLUGINS_API DATATYPE___BAG_values22_ArrayType_ArrayType_ChildArray : public DATATYPE_BASE
		{
		public:
			void createFromStreamEx(MemoryStream& stream, TArray<int64>& datas)
			{
				uint32 size = stream.readUint32();
				while(size > 0)
				{
					--size;
					datas.Add(stream.readInt64());
				};

			}

			void addToStreamEx(Bundle& stream, const TArray<int64>& v)
			{
				stream.writeUint32((uint32)v.Num());
				for(int i=0; i<v.Num(); ++i)
				{
					stream.writeInt64(v[i]);
				};
			}
		};

		DATATYPE___BAG_values22_ArrayType_ArrayType_ChildArray itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<TArray<int64>>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<TArray<int64>>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BAG_values22_ArrayType_ChildArray values22_DataType;

	void createFromStreamEx(MemoryStream& stream, BAG& datas);
	void addToStreamEx(Bundle& stream, const BAG& v);
};


class KBENGINEPLUGINS_API DATATYPE_EXAMPLES : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, EXAMPLES& datas);
	void addToStreamEx(Bundle& stream, const EXAMPLES& v);
};


class KBENGINEPLUGINS_API DATATYPE_TEST_ENTITY_PROPS : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, TEST_ENTITY_PROPS& datas);
	void addToStreamEx(Bundle& stream, const TEST_ENTITY_PROPS& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_ACTION : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_ACTION& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_ACTION& v);
};


class KBENGINEPLUGINS_API DATATYPE_UPDATE_GRID_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, UPDATE_GRID_INFO& datas);
	void addToStreamEx(Bundle& stream, const UPDATE_GRID_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_UPDATE_GRID_INFO_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__UPDATE_GRID_INFO_LIST_updateGridList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_UPDATE_GRID_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<UPDATE_GRID_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<UPDATE_GRID_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__UPDATE_GRID_INFO_LIST_updateGridList_ArrayType_ChildArray updateGridList_DataType;

	void createFromStreamEx(MemoryStream& stream, UPDATE_GRID_INFO_LIST& datas);
	void addToStreamEx(Bundle& stream, const UPDATE_GRID_INFO_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_GRID_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, BATTLE_GRID_INFO& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_GRID_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_CORE_UPDATE_BATLLE_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__CORE_UPDATE_BATLLE_INFO_updateList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_GRID_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_GRID_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_GRID_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORE_UPDATE_BATLLE_INFO_updateList_ArrayType_ChildArray updateList_DataType;

	void createFromStreamEx(MemoryStream& stream, CORE_UPDATE_BATLLE_INFO& datas);
	void addToStreamEx(Bundle& stream, const CORE_UPDATE_BATLLE_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_SYNC_BATTLE_TIME_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, SYNC_BATTLE_TIME_INFO& datas);
	void addToStreamEx(Bundle& stream, const SYNC_BATTLE_TIME_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_SYNC_PLAYER_BATTLE_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__SYNC_PLAYER_BATTLE_INFO_cardList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__SYNC_PLAYER_BATTLE_INFO_cardList_ArrayType_ChildArray cardList_DataType;

	void createFromStreamEx(MemoryStream& stream, SYNC_PLAYER_BATTLE_INFO& datas);
	void addToStreamEx(Bundle& stream, const SYNC_PLAYER_BATTLE_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_PERSIST_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_PERSIST_INFO_persistCardList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__PLAYER_PERSIST_INFO_persistCardList_ArrayType_ChildArray persistCardList_DataType;

	void createFromStreamEx(MemoryStream& stream, PLAYER_PERSIST_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_PERSIST_INFO& v);
};


}