/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once
#include "KBECommon.h"
#include "KBETypes.h"
#include "MemoryStream.h"
#include "Bundle.h"
#include "DataTypes.h"
namespace KBEngine
{


class KBENGINEPLUGINS_API DATATYPE_ENTITY_FORBID_COUNTER : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ENTITY_FORBID_COUNTER& datas);
	void addToStreamEx(Bundle& stream, const ENTITY_FORBID_COUNTER& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENTITYID_LIST : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ENTITYID_LIST& datas);
	void addToStreamEx(Bundle& stream, const ENTITYID_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_TEST_ENTITY_PROPS : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, TEST_ENTITY_PROPS& datas);
	void addToStreamEx(Bundle& stream, const TEST_ENTITY_PROPS& v);
};


class KBENGINEPLUGINS_API DATATYPE_STATE_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, STATE_INFO& datas);
	void addToStreamEx(Bundle& stream, const STATE_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_SYNC_EFFECT_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, SYNC_EFFECT_INFO& datas);
	void addToStreamEx(Bundle& stream, const SYNC_EFFECT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_GRID_ROW_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BATTLE_GRID_ROW_INFO_cols_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__BATTLE_GRID_ROW_INFO_cols_ArrayType_ChildArray cols_DataType;

	void createFromStreamEx(MemoryStream& stream, BATTLE_GRID_ROW_INFO& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_GRID_ROW_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_BOARD_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BATTLE_BOARD_INFO_rows_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_GRID_ROW_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_GRID_ROW_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_GRID_ROW_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BATTLE_BOARD_INFO_rows_ArrayType_ChildArray rows_DataType;

	void createFromStreamEx(MemoryStream& stream, BATTLE_BOARD_INFO& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_BOARD_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_GRID_STRING_STATE : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, BATTLE_GRID_STRING_STATE& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_GRID_STRING_STATE& v);
};


class KBENGINEPLUGINS_API DATATYPE_SYNC_CARD_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__SYNC_CARD_INFO_tags_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__SYNC_CARD_INFO_tags_ArrayType_ChildArray tags_DataType;

	class KBENGINEPLUGINS_API DATATYPE__SYNC_CARD_INFO_stateTags_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_STATE_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<STATE_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<STATE_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__SYNC_CARD_INFO_stateTags_ArrayType_ChildArray stateTags_DataType;

	class KBENGINEPLUGINS_API DATATYPE__SYNC_CARD_INFO_effectInfos_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_SYNC_EFFECT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<SYNC_EFFECT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<SYNC_EFFECT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__SYNC_CARD_INFO_effectInfos_ArrayType_ChildArray effectInfos_DataType;

	void createFromStreamEx(MemoryStream& stream, SYNC_CARD_INFO& datas);
	void addToStreamEx(Bundle& stream, const SYNC_CARD_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_SYNC_PLAYER_BATTLE_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__SYNC_PLAYER_BATTLE_INFO_cardList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_SYNC_CARD_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<SYNC_CARD_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<SYNC_CARD_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__SYNC_PLAYER_BATTLE_INFO_cardList_ArrayType_ChildArray cardList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__SYNC_PLAYER_BATTLE_INFO_handCardList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__SYNC_PLAYER_BATTLE_INFO_handCardList_ArrayType_ChildArray handCardList_DataType;

	void createFromStreamEx(MemoryStream& stream, SYNC_PLAYER_BATTLE_INFO& datas);
	void addToStreamEx(Bundle& stream, const SYNC_PLAYER_BATTLE_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_CORE_UPDATE_BATLLE_INFO : DATATYPE_BASE
{
public:
	DATATYPE_BATTLE_BOARD_INFO updateList_DataType;
	DATATYPE_SYNC_PLAYER_BATTLE_INFO playerInfo_DataType;
	void createFromStreamEx(MemoryStream& stream, CORE_UPDATE_BATLLE_INFO& datas);
	void addToStreamEx(Bundle& stream, const CORE_UPDATE_BATLLE_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_SYNC_BATTLE_TIME_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, SYNC_BATTLE_TIME_INFO& datas);
	void addToStreamEx(Bundle& stream, const SYNC_BATTLE_TIME_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_SYNC_MODIFICATION_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__SYNC_MODIFICATION_INFO_updateGridList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_GRID_STRING_STATE itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_GRID_STRING_STATE>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_GRID_STRING_STATE>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__SYNC_MODIFICATION_INFO_updateGridList_ArrayType_ChildArray updateGridList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__SYNC_MODIFICATION_INFO_updateCardList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_SYNC_CARD_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<SYNC_CARD_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<SYNC_CARD_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__SYNC_MODIFICATION_INFO_updateCardList_ArrayType_ChildArray updateCardList_DataType;

	void createFromStreamEx(MemoryStream& stream, SYNC_MODIFICATION_INFO& datas);
	void addToStreamEx(Bundle& stream, const SYNC_MODIFICATION_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_CARD_GROUP : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__CARD_GROUP_stringList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__CARD_GROUP_stringList_ArrayType_ChildArray stringList_DataType;

	void createFromStreamEx(MemoryStream& stream, CARD_GROUP& datas);
	void addToStreamEx(Bundle& stream, const CARD_GROUP& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_PERSIST_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_PERSIST_INFO_persistCardList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_CARD_GROUP itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<CARD_GROUP>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<CARD_GROUP>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_PERSIST_INFO_persistCardList_ArrayType_ChildArray persistCardList_DataType;

	void createFromStreamEx(MemoryStream& stream, PLAYER_PERSIST_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_PERSIST_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_STRING_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__STRING_LIST_stringList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__STRING_LIST_stringList_ArrayType_ChildArray stringList_DataType;

	void createFromStreamEx(MemoryStream& stream, STRING_LIST& datas);
	void addToStreamEx(Bundle& stream, const STRING_LIST& v);
};


}